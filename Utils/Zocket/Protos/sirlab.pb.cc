// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sirlab.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sirlab.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sirlab {

namespace {

const ::google::protobuf::Descriptor* State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  State_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sirlab_2eproto() {
  protobuf_AddDesc_sirlab_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sirlab.proto");
  GOOGLE_CHECK(file != NULL);
  State_descriptor_ = file->message_type(0);
  static const int State_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, sir1_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, sir1_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, sir1_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, sir2_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, sir2_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, sir2_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, sir3_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, sir3_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, sir3_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, adv1_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, adv1_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, adv1_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, adv2_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, adv2_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, adv2_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, adv3_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, adv3_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, adv3_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, ball_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, ball_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, message_),
  };
  State_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      State_descriptor_,
      State::default_instance_,
      State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _has_bits_[0]),
      -1,
      -1,
      sizeof(State),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sirlab_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      State_descriptor_, &State::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sirlab_2eproto() {
  delete State::default_instance_;
  delete State_reflection_;
}

void protobuf_AddDesc_sirlab_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014sirlab.proto\022\006sirlab\"\360\002\n\005State\022\016\n\006sir1"
    "_x\030\001 \002(\005\022\016\n\006sir1_y\030\002 \002(\005\022\022\n\nsir1_theta\030\003"
    " \002(\002\022\016\n\006sir2_x\030\004 \002(\005\022\016\n\006sir2_y\030\005 \002(\005\022\022\n\n"
    "sir2_theta\030\006 \002(\002\022\016\n\006sir3_x\030\007 \002(\005\022\016\n\006sir3"
    "_y\030\010 \002(\005\022\022\n\nsir3_theta\030\t \002(\002\022\016\n\006adv1_x\030\n"
    " \002(\005\022\016\n\006adv1_y\030\013 \002(\005\022\022\n\nadv1_theta\030\014 \001(\002"
    "\022\016\n\006adv2_x\030\r \002(\005\022\016\n\006adv2_y\030\016 \002(\005\022\022\n\nadv2"
    "_theta\030\017 \001(\002\022\016\n\006adv3_x\030\020 \002(\005\022\016\n\006adv3_y\030\021"
    " \002(\005\022\022\n\nadv3_theta\030\022 \001(\002\022\016\n\006ball_x\030\023 \002(\005"
    "\022\016\n\006ball_y\030\024 \002(\005\022\017\n\007message\030\025 \001(\005", 393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sirlab.proto", &protobuf_RegisterTypes);
  State::default_instance_ = new State();
  State::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sirlab_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sirlab_2eproto {
  StaticDescriptorInitializer_sirlab_2eproto() {
    protobuf_AddDesc_sirlab_2eproto();
  }
} static_descriptor_initializer_sirlab_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State::kSir1XFieldNumber;
const int State::kSir1YFieldNumber;
const int State::kSir1ThetaFieldNumber;
const int State::kSir2XFieldNumber;
const int State::kSir2YFieldNumber;
const int State::kSir2ThetaFieldNumber;
const int State::kSir3XFieldNumber;
const int State::kSir3YFieldNumber;
const int State::kSir3ThetaFieldNumber;
const int State::kAdv1XFieldNumber;
const int State::kAdv1YFieldNumber;
const int State::kAdv1ThetaFieldNumber;
const int State::kAdv2XFieldNumber;
const int State::kAdv2YFieldNumber;
const int State::kAdv2ThetaFieldNumber;
const int State::kAdv3XFieldNumber;
const int State::kAdv3YFieldNumber;
const int State::kAdv3ThetaFieldNumber;
const int State::kBallXFieldNumber;
const int State::kBallYFieldNumber;
const int State::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State::State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sirlab.State)
}

void State::InitAsDefaultInstance() {
}

State::State(const State& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sirlab.State)
}

void State::SharedCtor() {
  _cached_size_ = 0;
  sir1_x_ = 0;
  sir1_y_ = 0;
  sir1_theta_ = 0;
  sir2_x_ = 0;
  sir2_y_ = 0;
  sir2_theta_ = 0;
  sir3_x_ = 0;
  sir3_y_ = 0;
  sir3_theta_ = 0;
  adv1_x_ = 0;
  adv1_y_ = 0;
  adv1_theta_ = 0;
  adv2_x_ = 0;
  adv2_y_ = 0;
  adv2_theta_ = 0;
  adv3_x_ = 0;
  adv3_y_ = 0;
  adv3_theta_ = 0;
  ball_x_ = 0;
  ball_y_ = 0;
  message_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:sirlab.State)
  SharedDtor();
}

void State::SharedDtor() {
  if (this != default_instance_) {
  }
}

void State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_descriptor_;
}

const State& State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sirlab_2eproto();
  return *default_instance_;
}

State* State::default_instance_ = NULL;

State* State::New(::google::protobuf::Arena* arena) const {
  State* n = new State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void State::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<State*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(sir1_x_, sir3_y_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(sir3_theta_, adv3_x_);
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    ZR_(adv3_y_, message_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sirlab.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sir1_x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sir1_x_)));
          set_has_sir1_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sir1_y;
        break;
      }

      // required int32 sir1_y = 2;
      case 2: {
        if (tag == 16) {
         parse_sir1_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sir1_y_)));
          set_has_sir1_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_sir1_theta;
        break;
      }

      // required float sir1_theta = 3;
      case 3: {
        if (tag == 29) {
         parse_sir1_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sir1_theta_)));
          set_has_sir1_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sir2_x;
        break;
      }

      // required int32 sir2_x = 4;
      case 4: {
        if (tag == 32) {
         parse_sir2_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sir2_x_)));
          set_has_sir2_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sir2_y;
        break;
      }

      // required int32 sir2_y = 5;
      case 5: {
        if (tag == 40) {
         parse_sir2_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sir2_y_)));
          set_has_sir2_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_sir2_theta;
        break;
      }

      // required float sir2_theta = 6;
      case 6: {
        if (tag == 53) {
         parse_sir2_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sir2_theta_)));
          set_has_sir2_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sir3_x;
        break;
      }

      // required int32 sir3_x = 7;
      case 7: {
        if (tag == 56) {
         parse_sir3_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sir3_x_)));
          set_has_sir3_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sir3_y;
        break;
      }

      // required int32 sir3_y = 8;
      case 8: {
        if (tag == 64) {
         parse_sir3_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sir3_y_)));
          set_has_sir3_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_sir3_theta;
        break;
      }

      // required float sir3_theta = 9;
      case 9: {
        if (tag == 77) {
         parse_sir3_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sir3_theta_)));
          set_has_sir3_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_adv1_x;
        break;
      }

      // required int32 adv1_x = 10;
      case 10: {
        if (tag == 80) {
         parse_adv1_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adv1_x_)));
          set_has_adv1_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_adv1_y;
        break;
      }

      // required int32 adv1_y = 11;
      case 11: {
        if (tag == 88) {
         parse_adv1_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adv1_y_)));
          set_has_adv1_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_adv1_theta;
        break;
      }

      // optional float adv1_theta = 12;
      case 12: {
        if (tag == 101) {
         parse_adv1_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &adv1_theta_)));
          set_has_adv1_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_adv2_x;
        break;
      }

      // required int32 adv2_x = 13;
      case 13: {
        if (tag == 104) {
         parse_adv2_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adv2_x_)));
          set_has_adv2_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_adv2_y;
        break;
      }

      // required int32 adv2_y = 14;
      case 14: {
        if (tag == 112) {
         parse_adv2_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adv2_y_)));
          set_has_adv2_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_adv2_theta;
        break;
      }

      // optional float adv2_theta = 15;
      case 15: {
        if (tag == 125) {
         parse_adv2_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &adv2_theta_)));
          set_has_adv2_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_adv3_x;
        break;
      }

      // required int32 adv3_x = 16;
      case 16: {
        if (tag == 128) {
         parse_adv3_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adv3_x_)));
          set_has_adv3_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_adv3_y;
        break;
      }

      // required int32 adv3_y = 17;
      case 17: {
        if (tag == 136) {
         parse_adv3_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adv3_y_)));
          set_has_adv3_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_adv3_theta;
        break;
      }

      // optional float adv3_theta = 18;
      case 18: {
        if (tag == 149) {
         parse_adv3_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &adv3_theta_)));
          set_has_adv3_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_ball_x;
        break;
      }

      // required int32 ball_x = 19;
      case 19: {
        if (tag == 152) {
         parse_ball_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ball_x_)));
          set_has_ball_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_ball_y;
        break;
      }

      // required int32 ball_y = 20;
      case 20: {
        if (tag == 160) {
         parse_ball_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ball_y_)));
          set_has_ball_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_message;
        break;
      }

      // optional int32 message = 21;
      case 21: {
        if (tag == 168) {
         parse_message:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_)));
          set_has_message();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sirlab.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sirlab.State)
  return false;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sirlab.State)
  // required int32 sir1_x = 1;
  if (has_sir1_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sir1_x(), output);
  }

  // required int32 sir1_y = 2;
  if (has_sir1_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sir1_y(), output);
  }

  // required float sir1_theta = 3;
  if (has_sir1_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sir1_theta(), output);
  }

  // required int32 sir2_x = 4;
  if (has_sir2_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sir2_x(), output);
  }

  // required int32 sir2_y = 5;
  if (has_sir2_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sir2_y(), output);
  }

  // required float sir2_theta = 6;
  if (has_sir2_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sir2_theta(), output);
  }

  // required int32 sir3_x = 7;
  if (has_sir3_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sir3_x(), output);
  }

  // required int32 sir3_y = 8;
  if (has_sir3_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sir3_y(), output);
  }

  // required float sir3_theta = 9;
  if (has_sir3_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->sir3_theta(), output);
  }

  // required int32 adv1_x = 10;
  if (has_adv1_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->adv1_x(), output);
  }

  // required int32 adv1_y = 11;
  if (has_adv1_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->adv1_y(), output);
  }

  // optional float adv1_theta = 12;
  if (has_adv1_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->adv1_theta(), output);
  }

  // required int32 adv2_x = 13;
  if (has_adv2_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->adv2_x(), output);
  }

  // required int32 adv2_y = 14;
  if (has_adv2_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->adv2_y(), output);
  }

  // optional float adv2_theta = 15;
  if (has_adv2_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->adv2_theta(), output);
  }

  // required int32 adv3_x = 16;
  if (has_adv3_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->adv3_x(), output);
  }

  // required int32 adv3_y = 17;
  if (has_adv3_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->adv3_y(), output);
  }

  // optional float adv3_theta = 18;
  if (has_adv3_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->adv3_theta(), output);
  }

  // required int32 ball_x = 19;
  if (has_ball_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->ball_x(), output);
  }

  // required int32 ball_y = 20;
  if (has_ball_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->ball_y(), output);
  }

  // optional int32 message = 21;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sirlab.State)
}

::google::protobuf::uint8* State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sirlab.State)
  // required int32 sir1_x = 1;
  if (has_sir1_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sir1_x(), target);
  }

  // required int32 sir1_y = 2;
  if (has_sir1_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sir1_y(), target);
  }

  // required float sir1_theta = 3;
  if (has_sir1_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sir1_theta(), target);
  }

  // required int32 sir2_x = 4;
  if (has_sir2_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sir2_x(), target);
  }

  // required int32 sir2_y = 5;
  if (has_sir2_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sir2_y(), target);
  }

  // required float sir2_theta = 6;
  if (has_sir2_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->sir2_theta(), target);
  }

  // required int32 sir3_x = 7;
  if (has_sir3_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sir3_x(), target);
  }

  // required int32 sir3_y = 8;
  if (has_sir3_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sir3_y(), target);
  }

  // required float sir3_theta = 9;
  if (has_sir3_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->sir3_theta(), target);
  }

  // required int32 adv1_x = 10;
  if (has_adv1_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->adv1_x(), target);
  }

  // required int32 adv1_y = 11;
  if (has_adv1_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->adv1_y(), target);
  }

  // optional float adv1_theta = 12;
  if (has_adv1_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->adv1_theta(), target);
  }

  // required int32 adv2_x = 13;
  if (has_adv2_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->adv2_x(), target);
  }

  // required int32 adv2_y = 14;
  if (has_adv2_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->adv2_y(), target);
  }

  // optional float adv2_theta = 15;
  if (has_adv2_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->adv2_theta(), target);
  }

  // required int32 adv3_x = 16;
  if (has_adv3_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->adv3_x(), target);
  }

  // required int32 adv3_y = 17;
  if (has_adv3_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->adv3_y(), target);
  }

  // optional float adv3_theta = 18;
  if (has_adv3_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->adv3_theta(), target);
  }

  // required int32 ball_x = 19;
  if (has_ball_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->ball_x(), target);
  }

  // required int32 ball_y = 20;
  if (has_ball_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->ball_y(), target);
  }

  // optional int32 message = 21;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sirlab.State)
  return target;
}

int State::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_sir1_x()) {
    // required int32 sir1_x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sir1_x());
  }

  if (has_sir1_y()) {
    // required int32 sir1_y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sir1_y());
  }

  if (has_sir1_theta()) {
    // required float sir1_theta = 3;
    total_size += 1 + 4;
  }

  if (has_sir2_x()) {
    // required int32 sir2_x = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sir2_x());
  }

  if (has_sir2_y()) {
    // required int32 sir2_y = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sir2_y());
  }

  if (has_sir2_theta()) {
    // required float sir2_theta = 6;
    total_size += 1 + 4;
  }

  if (has_sir3_x()) {
    // required int32 sir3_x = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sir3_x());
  }

  if (has_sir3_y()) {
    // required int32 sir3_y = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sir3_y());
  }

  if (has_sir3_theta()) {
    // required float sir3_theta = 9;
    total_size += 1 + 4;
  }

  if (has_adv1_x()) {
    // required int32 adv1_x = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adv1_x());
  }

  if (has_adv1_y()) {
    // required int32 adv1_y = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adv1_y());
  }

  if (has_adv2_x()) {
    // required int32 adv2_x = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adv2_x());
  }

  if (has_adv2_y()) {
    // required int32 adv2_y = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adv2_y());
  }

  if (has_adv3_x()) {
    // required int32 adv3_x = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adv3_x());
  }

  if (has_adv3_y()) {
    // required int32 adv3_y = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adv3_y());
  }

  if (has_ball_x()) {
    // required int32 ball_x = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ball_x());
  }

  if (has_ball_y()) {
    // required int32 ball_y = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ball_y());
  }

  return total_size;
}
int State::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000db7ff) ^ 0x000db7ff) == 0) {  // All required fields are present.
    // required int32 sir1_x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sir1_x());

    // required int32 sir1_y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sir1_y());

    // required float sir1_theta = 3;
    total_size += 1 + 4;

    // required int32 sir2_x = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sir2_x());

    // required int32 sir2_y = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sir2_y());

    // required float sir2_theta = 6;
    total_size += 1 + 4;

    // required int32 sir3_x = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sir3_x());

    // required int32 sir3_y = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sir3_y());

    // required float sir3_theta = 9;
    total_size += 1 + 4;

    // required int32 adv1_x = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adv1_x());

    // required int32 adv1_y = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adv1_y());

    // required int32 adv2_x = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adv2_x());

    // required int32 adv2_y = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adv2_y());

    // required int32 adv3_x = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adv3_x());

    // required int32 adv3_y = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adv3_y());

    // required int32 ball_x = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ball_x());

    // required int32 ball_y = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ball_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[11 / 32] & 18432u) {
    // optional float adv1_theta = 12;
    if (has_adv1_theta()) {
      total_size += 1 + 4;
    }

    // optional float adv2_theta = 15;
    if (has_adv2_theta()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[17 / 32] & 1179648u) {
    // optional float adv3_theta = 18;
    if (has_adv3_theta()) {
      total_size += 2 + 4;
    }

    // optional int32 message = 21;
    if (has_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const State* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const State>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sir1_x()) {
      set_sir1_x(from.sir1_x());
    }
    if (from.has_sir1_y()) {
      set_sir1_y(from.sir1_y());
    }
    if (from.has_sir1_theta()) {
      set_sir1_theta(from.sir1_theta());
    }
    if (from.has_sir2_x()) {
      set_sir2_x(from.sir2_x());
    }
    if (from.has_sir2_y()) {
      set_sir2_y(from.sir2_y());
    }
    if (from.has_sir2_theta()) {
      set_sir2_theta(from.sir2_theta());
    }
    if (from.has_sir3_x()) {
      set_sir3_x(from.sir3_x());
    }
    if (from.has_sir3_y()) {
      set_sir3_y(from.sir3_y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sir3_theta()) {
      set_sir3_theta(from.sir3_theta());
    }
    if (from.has_adv1_x()) {
      set_adv1_x(from.adv1_x());
    }
    if (from.has_adv1_y()) {
      set_adv1_y(from.adv1_y());
    }
    if (from.has_adv1_theta()) {
      set_adv1_theta(from.adv1_theta());
    }
    if (from.has_adv2_x()) {
      set_adv2_x(from.adv2_x());
    }
    if (from.has_adv2_y()) {
      set_adv2_y(from.adv2_y());
    }
    if (from.has_adv2_theta()) {
      set_adv2_theta(from.adv2_theta());
    }
    if (from.has_adv3_x()) {
      set_adv3_x(from.adv3_x());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_adv3_y()) {
      set_adv3_y(from.adv3_y());
    }
    if (from.has_adv3_theta()) {
      set_adv3_theta(from.adv3_theta());
    }
    if (from.has_ball_x()) {
      set_ball_x(from.ball_x());
    }
    if (from.has_ball_y()) {
      set_ball_y(from.ball_y());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  if ((_has_bits_[0] & 0x000db7ff) != 0x000db7ff) return false;

  return true;
}

void State::Swap(State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void State::InternalSwap(State* other) {
  std::swap(sir1_x_, other->sir1_x_);
  std::swap(sir1_y_, other->sir1_y_);
  std::swap(sir1_theta_, other->sir1_theta_);
  std::swap(sir2_x_, other->sir2_x_);
  std::swap(sir2_y_, other->sir2_y_);
  std::swap(sir2_theta_, other->sir2_theta_);
  std::swap(sir3_x_, other->sir3_x_);
  std::swap(sir3_y_, other->sir3_y_);
  std::swap(sir3_theta_, other->sir3_theta_);
  std::swap(adv1_x_, other->adv1_x_);
  std::swap(adv1_y_, other->adv1_y_);
  std::swap(adv1_theta_, other->adv1_theta_);
  std::swap(adv2_x_, other->adv2_x_);
  std::swap(adv2_y_, other->adv2_y_);
  std::swap(adv2_theta_, other->adv2_theta_);
  std::swap(adv3_x_, other->adv3_x_);
  std::swap(adv3_y_, other->adv3_y_);
  std::swap(adv3_theta_, other->adv3_theta_);
  std::swap(ball_x_, other->ball_x_);
  std::swap(ball_y_, other->ball_y_);
  std::swap(message_, other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = State_descriptor_;
  metadata.reflection = State_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// State

// required int32 sir1_x = 1;
bool State::has_sir1_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void State::set_has_sir1_x() {
  _has_bits_[0] |= 0x00000001u;
}
void State::clear_has_sir1_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void State::clear_sir1_x() {
  sir1_x_ = 0;
  clear_has_sir1_x();
}
 ::google::protobuf::int32 State::sir1_x() const {
  // @@protoc_insertion_point(field_get:sirlab.State.sir1_x)
  return sir1_x_;
}
 void State::set_sir1_x(::google::protobuf::int32 value) {
  set_has_sir1_x();
  sir1_x_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.sir1_x)
}

// required int32 sir1_y = 2;
bool State::has_sir1_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void State::set_has_sir1_y() {
  _has_bits_[0] |= 0x00000002u;
}
void State::clear_has_sir1_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void State::clear_sir1_y() {
  sir1_y_ = 0;
  clear_has_sir1_y();
}
 ::google::protobuf::int32 State::sir1_y() const {
  // @@protoc_insertion_point(field_get:sirlab.State.sir1_y)
  return sir1_y_;
}
 void State::set_sir1_y(::google::protobuf::int32 value) {
  set_has_sir1_y();
  sir1_y_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.sir1_y)
}

// required float sir1_theta = 3;
bool State::has_sir1_theta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void State::set_has_sir1_theta() {
  _has_bits_[0] |= 0x00000004u;
}
void State::clear_has_sir1_theta() {
  _has_bits_[0] &= ~0x00000004u;
}
void State::clear_sir1_theta() {
  sir1_theta_ = 0;
  clear_has_sir1_theta();
}
 float State::sir1_theta() const {
  // @@protoc_insertion_point(field_get:sirlab.State.sir1_theta)
  return sir1_theta_;
}
 void State::set_sir1_theta(float value) {
  set_has_sir1_theta();
  sir1_theta_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.sir1_theta)
}

// required int32 sir2_x = 4;
bool State::has_sir2_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void State::set_has_sir2_x() {
  _has_bits_[0] |= 0x00000008u;
}
void State::clear_has_sir2_x() {
  _has_bits_[0] &= ~0x00000008u;
}
void State::clear_sir2_x() {
  sir2_x_ = 0;
  clear_has_sir2_x();
}
 ::google::protobuf::int32 State::sir2_x() const {
  // @@protoc_insertion_point(field_get:sirlab.State.sir2_x)
  return sir2_x_;
}
 void State::set_sir2_x(::google::protobuf::int32 value) {
  set_has_sir2_x();
  sir2_x_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.sir2_x)
}

// required int32 sir2_y = 5;
bool State::has_sir2_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void State::set_has_sir2_y() {
  _has_bits_[0] |= 0x00000010u;
}
void State::clear_has_sir2_y() {
  _has_bits_[0] &= ~0x00000010u;
}
void State::clear_sir2_y() {
  sir2_y_ = 0;
  clear_has_sir2_y();
}
 ::google::protobuf::int32 State::sir2_y() const {
  // @@protoc_insertion_point(field_get:sirlab.State.sir2_y)
  return sir2_y_;
}
 void State::set_sir2_y(::google::protobuf::int32 value) {
  set_has_sir2_y();
  sir2_y_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.sir2_y)
}

// required float sir2_theta = 6;
bool State::has_sir2_theta() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void State::set_has_sir2_theta() {
  _has_bits_[0] |= 0x00000020u;
}
void State::clear_has_sir2_theta() {
  _has_bits_[0] &= ~0x00000020u;
}
void State::clear_sir2_theta() {
  sir2_theta_ = 0;
  clear_has_sir2_theta();
}
 float State::sir2_theta() const {
  // @@protoc_insertion_point(field_get:sirlab.State.sir2_theta)
  return sir2_theta_;
}
 void State::set_sir2_theta(float value) {
  set_has_sir2_theta();
  sir2_theta_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.sir2_theta)
}

// required int32 sir3_x = 7;
bool State::has_sir3_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void State::set_has_sir3_x() {
  _has_bits_[0] |= 0x00000040u;
}
void State::clear_has_sir3_x() {
  _has_bits_[0] &= ~0x00000040u;
}
void State::clear_sir3_x() {
  sir3_x_ = 0;
  clear_has_sir3_x();
}
 ::google::protobuf::int32 State::sir3_x() const {
  // @@protoc_insertion_point(field_get:sirlab.State.sir3_x)
  return sir3_x_;
}
 void State::set_sir3_x(::google::protobuf::int32 value) {
  set_has_sir3_x();
  sir3_x_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.sir3_x)
}

// required int32 sir3_y = 8;
bool State::has_sir3_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void State::set_has_sir3_y() {
  _has_bits_[0] |= 0x00000080u;
}
void State::clear_has_sir3_y() {
  _has_bits_[0] &= ~0x00000080u;
}
void State::clear_sir3_y() {
  sir3_y_ = 0;
  clear_has_sir3_y();
}
 ::google::protobuf::int32 State::sir3_y() const {
  // @@protoc_insertion_point(field_get:sirlab.State.sir3_y)
  return sir3_y_;
}
 void State::set_sir3_y(::google::protobuf::int32 value) {
  set_has_sir3_y();
  sir3_y_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.sir3_y)
}

// required float sir3_theta = 9;
bool State::has_sir3_theta() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void State::set_has_sir3_theta() {
  _has_bits_[0] |= 0x00000100u;
}
void State::clear_has_sir3_theta() {
  _has_bits_[0] &= ~0x00000100u;
}
void State::clear_sir3_theta() {
  sir3_theta_ = 0;
  clear_has_sir3_theta();
}
 float State::sir3_theta() const {
  // @@protoc_insertion_point(field_get:sirlab.State.sir3_theta)
  return sir3_theta_;
}
 void State::set_sir3_theta(float value) {
  set_has_sir3_theta();
  sir3_theta_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.sir3_theta)
}

// required int32 adv1_x = 10;
bool State::has_adv1_x() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void State::set_has_adv1_x() {
  _has_bits_[0] |= 0x00000200u;
}
void State::clear_has_adv1_x() {
  _has_bits_[0] &= ~0x00000200u;
}
void State::clear_adv1_x() {
  adv1_x_ = 0;
  clear_has_adv1_x();
}
 ::google::protobuf::int32 State::adv1_x() const {
  // @@protoc_insertion_point(field_get:sirlab.State.adv1_x)
  return adv1_x_;
}
 void State::set_adv1_x(::google::protobuf::int32 value) {
  set_has_adv1_x();
  adv1_x_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.adv1_x)
}

// required int32 adv1_y = 11;
bool State::has_adv1_y() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void State::set_has_adv1_y() {
  _has_bits_[0] |= 0x00000400u;
}
void State::clear_has_adv1_y() {
  _has_bits_[0] &= ~0x00000400u;
}
void State::clear_adv1_y() {
  adv1_y_ = 0;
  clear_has_adv1_y();
}
 ::google::protobuf::int32 State::adv1_y() const {
  // @@protoc_insertion_point(field_get:sirlab.State.adv1_y)
  return adv1_y_;
}
 void State::set_adv1_y(::google::protobuf::int32 value) {
  set_has_adv1_y();
  adv1_y_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.adv1_y)
}

// optional float adv1_theta = 12;
bool State::has_adv1_theta() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void State::set_has_adv1_theta() {
  _has_bits_[0] |= 0x00000800u;
}
void State::clear_has_adv1_theta() {
  _has_bits_[0] &= ~0x00000800u;
}
void State::clear_adv1_theta() {
  adv1_theta_ = 0;
  clear_has_adv1_theta();
}
 float State::adv1_theta() const {
  // @@protoc_insertion_point(field_get:sirlab.State.adv1_theta)
  return adv1_theta_;
}
 void State::set_adv1_theta(float value) {
  set_has_adv1_theta();
  adv1_theta_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.adv1_theta)
}

// required int32 adv2_x = 13;
bool State::has_adv2_x() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void State::set_has_adv2_x() {
  _has_bits_[0] |= 0x00001000u;
}
void State::clear_has_adv2_x() {
  _has_bits_[0] &= ~0x00001000u;
}
void State::clear_adv2_x() {
  adv2_x_ = 0;
  clear_has_adv2_x();
}
 ::google::protobuf::int32 State::adv2_x() const {
  // @@protoc_insertion_point(field_get:sirlab.State.adv2_x)
  return adv2_x_;
}
 void State::set_adv2_x(::google::protobuf::int32 value) {
  set_has_adv2_x();
  adv2_x_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.adv2_x)
}

// required int32 adv2_y = 14;
bool State::has_adv2_y() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void State::set_has_adv2_y() {
  _has_bits_[0] |= 0x00002000u;
}
void State::clear_has_adv2_y() {
  _has_bits_[0] &= ~0x00002000u;
}
void State::clear_adv2_y() {
  adv2_y_ = 0;
  clear_has_adv2_y();
}
 ::google::protobuf::int32 State::adv2_y() const {
  // @@protoc_insertion_point(field_get:sirlab.State.adv2_y)
  return adv2_y_;
}
 void State::set_adv2_y(::google::protobuf::int32 value) {
  set_has_adv2_y();
  adv2_y_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.adv2_y)
}

// optional float adv2_theta = 15;
bool State::has_adv2_theta() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void State::set_has_adv2_theta() {
  _has_bits_[0] |= 0x00004000u;
}
void State::clear_has_adv2_theta() {
  _has_bits_[0] &= ~0x00004000u;
}
void State::clear_adv2_theta() {
  adv2_theta_ = 0;
  clear_has_adv2_theta();
}
 float State::adv2_theta() const {
  // @@protoc_insertion_point(field_get:sirlab.State.adv2_theta)
  return adv2_theta_;
}
 void State::set_adv2_theta(float value) {
  set_has_adv2_theta();
  adv2_theta_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.adv2_theta)
}

// required int32 adv3_x = 16;
bool State::has_adv3_x() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void State::set_has_adv3_x() {
  _has_bits_[0] |= 0x00008000u;
}
void State::clear_has_adv3_x() {
  _has_bits_[0] &= ~0x00008000u;
}
void State::clear_adv3_x() {
  adv3_x_ = 0;
  clear_has_adv3_x();
}
 ::google::protobuf::int32 State::adv3_x() const {
  // @@protoc_insertion_point(field_get:sirlab.State.adv3_x)
  return adv3_x_;
}
 void State::set_adv3_x(::google::protobuf::int32 value) {
  set_has_adv3_x();
  adv3_x_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.adv3_x)
}

// required int32 adv3_y = 17;
bool State::has_adv3_y() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void State::set_has_adv3_y() {
  _has_bits_[0] |= 0x00010000u;
}
void State::clear_has_adv3_y() {
  _has_bits_[0] &= ~0x00010000u;
}
void State::clear_adv3_y() {
  adv3_y_ = 0;
  clear_has_adv3_y();
}
 ::google::protobuf::int32 State::adv3_y() const {
  // @@protoc_insertion_point(field_get:sirlab.State.adv3_y)
  return adv3_y_;
}
 void State::set_adv3_y(::google::protobuf::int32 value) {
  set_has_adv3_y();
  adv3_y_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.adv3_y)
}

// optional float adv3_theta = 18;
bool State::has_adv3_theta() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void State::set_has_adv3_theta() {
  _has_bits_[0] |= 0x00020000u;
}
void State::clear_has_adv3_theta() {
  _has_bits_[0] &= ~0x00020000u;
}
void State::clear_adv3_theta() {
  adv3_theta_ = 0;
  clear_has_adv3_theta();
}
 float State::adv3_theta() const {
  // @@protoc_insertion_point(field_get:sirlab.State.adv3_theta)
  return adv3_theta_;
}
 void State::set_adv3_theta(float value) {
  set_has_adv3_theta();
  adv3_theta_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.adv3_theta)
}

// required int32 ball_x = 19;
bool State::has_ball_x() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void State::set_has_ball_x() {
  _has_bits_[0] |= 0x00040000u;
}
void State::clear_has_ball_x() {
  _has_bits_[0] &= ~0x00040000u;
}
void State::clear_ball_x() {
  ball_x_ = 0;
  clear_has_ball_x();
}
 ::google::protobuf::int32 State::ball_x() const {
  // @@protoc_insertion_point(field_get:sirlab.State.ball_x)
  return ball_x_;
}
 void State::set_ball_x(::google::protobuf::int32 value) {
  set_has_ball_x();
  ball_x_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.ball_x)
}

// required int32 ball_y = 20;
bool State::has_ball_y() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void State::set_has_ball_y() {
  _has_bits_[0] |= 0x00080000u;
}
void State::clear_has_ball_y() {
  _has_bits_[0] &= ~0x00080000u;
}
void State::clear_ball_y() {
  ball_y_ = 0;
  clear_has_ball_y();
}
 ::google::protobuf::int32 State::ball_y() const {
  // @@protoc_insertion_point(field_get:sirlab.State.ball_y)
  return ball_y_;
}
 void State::set_ball_y(::google::protobuf::int32 value) {
  set_has_ball_y();
  ball_y_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.ball_y)
}

// optional int32 message = 21;
bool State::has_message() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void State::set_has_message() {
  _has_bits_[0] |= 0x00100000u;
}
void State::clear_has_message() {
  _has_bits_[0] &= ~0x00100000u;
}
void State::clear_message() {
  message_ = 0;
  clear_has_message();
}
 ::google::protobuf::int32 State::message() const {
  // @@protoc_insertion_point(field_get:sirlab.State.message)
  return message_;
}
 void State::set_message(::google::protobuf::int32 value) {
  set_has_message();
  message_ = value;
  // @@protoc_insertion_point(field_set:sirlab.State.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sirlab

// @@protoc_insertion_point(global_scope)
